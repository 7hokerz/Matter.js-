const { Engine, Render, World, Bodies, Runner } = Matter;

1. Engine: Matter.js의 물리 엔진 생성 및 관리

const engine = Engine.create();을 통해 생성 가능


2. Render: 렌더링 모듈 생성 및 관리
const render = Render.create({
    element: document.body, // 렌더링할 DOM 요소
    engine: engine,         // 렌더링할 엔진
    options: {
        width: 800,
        height: 600,
        background: 'white',
        wireframes: false
        //물리 객체의 윤곽선만 표시할 지 여부
    }
});
렌더러는 시뮬레이션 결과를 화면에 표시하는 역할.


3. World: 물리 객체를 관리하는 월드를 생성 및 조작
World.add(engine.world, [body1, body2]);
engine.world에 body1, body2 객체를 추가


4. Bodies: 다양한 형태의 물리 객체 생성
const ball = Bodies.circle(200, 200, 50, {
    restitution: 0.8//탄성
});

rectangle, circle 등으로 바닥, 공, 벽 생성 가능

예:
rectangle(x,y,width,height,options);
x,y: 사각형 중심 x,y 좌표
width, height: 너비, 높이
options{
    isStatic: 객체가 고정된 상태인지 여부
    render: 사각형의 시각적 속성 설정
}


5. Runner: 물리 엔진 자동 업데이트 러너 생성
const runner = Runner.create();
Runner.run(runner, engine);

Runner.create() >> 새로운 러너 생성
Runner.run() >> 엔진 업데이트 루프 시작


+ 클린업 함수
return () => {
    Render.stop(render);
    Runner.stop(runner);
};
컴포넌트가 언마운트 또는 업데이트가 필요하지 않을 때
렌더 및 러너를 중지하여 자원 누수 방지


